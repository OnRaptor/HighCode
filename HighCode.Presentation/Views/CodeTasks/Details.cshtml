@using HighCode.Presentation.Data.Models
@model HighCode.Presentation.ViewModels.TaskViewModel

@{
    ViewData["Title"] = "Details";
}

<div>
    <div class="d-flex flex-row gap-1">
        <a class="btn btn-primary" asp-action="Index">Назад</a>
        @if (User.IsInRole("Moderator"))
        {
            <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.Task.Id">Изменить</a>
        }
    </div>
    <h4>Задача</h4>
    <hr/>
    <h3>@Model.Task.Title</h3>
    <p class="m-2 lead">@Model.Task.Description</p>
    <p>
        <small><strong>@Model.Task.ProgrammingLanguage 💠 @CodeTask.ComplexityToString(Model.Task.Complexity)</strong></small>
    </p>
    <hr class="mt-5"/>
    <h4>Решения пользователей</h4>
    @if (Model.Solutions.Count() == 0)
    {
        <p>Нет решений🥺</p>
        <a class="btn btn-primary" asp-route-CodeTaskId="@Model.Task.Id" asp-action="Create" asp-controller="CodeTaskSolutions">Создать</a>
    }
    @foreach (var solution in Model.Solutions)
    {
        <div>
            <hr/>
            <h5>@solution.Author?.UserName</h5>
            <pre class="pre-scrollable"><code>@solution.Code</code></pre>
            <hr/>
        </div>
    }
</div>

