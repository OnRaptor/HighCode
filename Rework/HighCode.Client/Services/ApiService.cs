// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace HighCode.Client.Services
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "0.9.9.0")]
    public partial interface IHighCodeAPI
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/comments/PostComment")]
        Task<PostCommentResponse> PostComment([Body] PostCommentCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/comments/GetComments")]
        Task<GetCommentsResponse> GetComments([Query, AliasAs("RelatedCommentId")] System.Guid? relatedCommentId, [Query, AliasAs("RelatedSolutionId")] System.Guid? relatedSolutionId, [Query, AliasAs("RelatedTaskId")] System.Guid? relatedTaskId);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/comments/DeleteComment")]
        Task<DeleteCommentResponse> DeleteComment([Query, AliasAs("Id")] System.Guid? id);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/leaderboard/GetLeaderboard")]
        Task<GetLeaderboardsResponse> GetLeaderboard();

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/reactions/AddReactionToComment")]
        Task<PostReactionForCommentResponse> AddReactionToComment([Body] PostReactionForCommentCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/reactions/AddReactionToSolution")]
        Task<PostReactionForSolutionResponse> AddReactionToSolution([Body] PostReactionForSolutionCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/solution/SaveSolution")]
        Task<SimpleResponse> SaveSolution([Body] SaveSolutionCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/solution/ChangeSolutionPublish")]
        Task<SimpleResponse> ChangeSolutionPublish([Body] ChangeSolutionPublishCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/solution/GetSolutionForUser")]
        Task<GetSolutionResponse> GetSolutionForUser([Query, AliasAs("TaskId")] System.Guid? taskId);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/solution/GetSolutions")]
        Task<GetSolutionsResponse> GetSolutions();

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/solution/TestCode")]
        Task<TestCodeResponse> TestCode([Body] TestCodeCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/tasks/CreateTask")]
        Task<CreateTaskResponse> CreateTask([Body] TaskDTO body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/tasks/GetTasks")]
        Task<GetAllTaskResponse> GetTasks();

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Get("/api/tasks/GetTask")]
        Task<GetTaskByIdResponse> GetTask([Query, AliasAs("Id")] System.Guid? id);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/tasks/EditTask")]
        Task<SimpleResponse> EditTask([Body] EditTaskCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/tasks/DeleteTask")]
        Task<SimpleResponse> DeleteTask([Body] DeleteTaskCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/user/Login")]
        Task<LoginCommandResponse> Login([Body] LoginCommand body);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">
        /// Thrown when the request returns a non-success status code:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>409</term>
        /// <description>Conflict</description>
        /// </item>
        /// </list>
        /// </exception>
        [Headers("Accept: application/json")]
        [Post("/api/user/Register")]
        Task<RegisterCommandResponse> Register([Body] RegisterCommand body);


    }
}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace HighCode.Client
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeSolutionPublishCommand
    {

        [JsonPropertyName("taskId")]
        public System.Guid TaskId { get; set; }

        [JsonPropertyName("isPublish")]
        public bool IsPublish { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CodeTask
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("unitTestCode")]
        public string UnitTestCode { get; set; }

        [JsonPropertyName("templateFuncSignature")]
        public string TemplateFuncSignature { get; set; }

        [JsonPropertyName("complexity")]
        public int Complexity { get; set; }

        [JsonPropertyName("programmingLanguage")]
        public string ProgrammingLanguage { get; set; }

        [JsonPropertyName("authorId")]
        public System.Guid? AuthorId { get; set; }

        [JsonPropertyName("author")]
        public User Author { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentDTO
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("content")]
        public string Content { get; set; }

        [JsonPropertyName("authorName")]
        public string AuthorName { get; set; }

        [JsonPropertyName("repliedAuthorName")]
        public string RepliedAuthorName { get; set; }

        [JsonPropertyName("createdDate")]
        public System.DateTimeOffset CreatedDate { get; set; }

        [JsonPropertyName("likes")]
        public int Likes { get; set; }

        [JsonPropertyName("dislikes")]
        public int Dislikes { get; set; }

        [JsonPropertyName("myReaction")]
        public int? MyReaction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTaskResponse
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteCommentResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteTaskCommand
    {

        [JsonPropertyName("taskId")]
        public System.Guid TaskId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditTaskCommand
    {

        [JsonPropertyName("taskId")]
        public System.Guid TaskId { get; set; }

        [JsonPropertyName("task")]
        public TaskDTO Task { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {

        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; } = "ERROR_MESSAGE";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = false;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllTaskResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("tasks")]
        public ICollection<CodeTask> Tasks { get; set; }

        [JsonPropertyName("count")]
        public int Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCommentsResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("comments")]
        public ICollection<CommentDTO> Comments { get; set; }

        [JsonPropertyName("count")]
        public int Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLeaderboardsResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("leaderboards")]
        public ICollection<LeaderboardDTO> Leaderboards { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSolutionResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("solution")]
        public SolutionDTO Solution { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSolutionsResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("solutions")]
        public ICollection<SolutionDTO> Solutions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTaskByIdResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("task")]
        public TaskDTO Task { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeaderboardDTO
    {

        [JsonPropertyName("username")]
        public string Username { get; set; }

        [JsonPropertyName("score")]
        public double Score { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginCommand
    {

        [JsonPropertyName("login")]
        public string Login { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginCommandResponse
    {

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("token")]
        public string Token { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostCommentCommand
    {

        [JsonPropertyName("content")]
        public string Content { get; set; }

        [JsonPropertyName("anotherAuthorName")]
        public string AnotherAuthorName { get; set; }

        [JsonPropertyName("relatedCommentId")]
        public System.Guid? RelatedCommentId { get; set; }

        [JsonPropertyName("relatedSolutionId")]
        public System.Guid? RelatedSolutionId { get; set; }

        [JsonPropertyName("relatedTaskId")]
        public System.Guid? RelatedTaskId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostCommentResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostReactionForCommentCommand
    {

        [JsonPropertyName("commentId")]
        public System.Guid CommentId { get; set; }

        [JsonPropertyName("reaction")]
        public ReactionType Reaction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostReactionForCommentResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("likesCount")]
        public int LikesCount { get; set; }

        [JsonPropertyName("dislikesCount")]
        public int DislikesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostReactionForSolutionCommand
    {

        [JsonPropertyName("solutionId")]
        public System.Guid SolutionId { get; set; }

        [JsonPropertyName("reaction")]
        public SolutionReactionType Reaction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostReactionForSolutionResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("solutionReactions")]
        public SolutionReactions SolutionReactions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReactionType
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterCommand
    {

        [JsonPropertyName("login")]
        public string Login { get; set; }

        [JsonPropertyName("userName")]
        public string UserName { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterCommandResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("token")]
        public string Token { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RoleType
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveSolutionCommand
    {

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("taskId")]
        public System.Guid TaskId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimpleResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("content")]
        public object Content { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SolutionDTO
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("isPublished")]
        public bool? IsPublished { get; set; }

        [JsonPropertyName("isTested")]
        public bool? IsTested { get; set; }

        [JsonPropertyName("isTestingAvailable")]
        public bool? IsTestingAvailable { get; set; }

        [JsonPropertyName("solutionReactions")]
        public SolutionReactions SolutionReactions { get; set; }

        [JsonPropertyName("myReaction")]
        public int? MyReaction { get; set; }

        [JsonPropertyName("authorName")]
        public string AuthorName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SolutionReactionType
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SolutionReactions
    {

        [JsonPropertyName("interestingCount")]
        public int InterestingCount { get; set; }

        [JsonPropertyName("cleverCount")]
        public int CleverCount { get; set; }

        [JsonPropertyName("funCount")]
        public int FunCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskDTO
    {

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("unitTestCode")]
        public string UnitTestCode { get; set; }

        [JsonPropertyName("templateFuncSignature")]
        public string TemplateFuncSignature { get; set; }

        [JsonPropertyName("complexity")]
        public int? Complexity { get; set; }

        [JsonPropertyName("programmingLanguage")]
        public string ProgrammingLanguage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestCodeCommand
    {

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("taskId")]
        public System.Guid TaskId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestCodeResponse
    {

        [JsonPropertyName("message")]
        public string Message { get; set; } = "SUCCESS";

        [JsonPropertyName("success")]
        public bool Success { get; set; } = true;

        [JsonPropertyName("testResult")]
        public TestCodeResult TestResult { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestCodeResult
    {

        [JsonPropertyName("totalTestsCount")]
        public int TotalTestsCount { get; set; }

        [JsonPropertyName("successTestCount")]
        public int SuccessTestCount { get; set; }

        [JsonPropertyName("testOutput")]
        public string TestOutput { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("login")]
        public string Login { get; set; }

        [JsonPropertyName("userName")]
        public string UserName { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("role")]
        public RoleType Role { get; set; }

        [JsonPropertyName("passwordHash")]
        public byte[] PasswordHash { get; set; }

        [JsonPropertyName("passwordSalt")]
        public byte[] PasswordSalt { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625