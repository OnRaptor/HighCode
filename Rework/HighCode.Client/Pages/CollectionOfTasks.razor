@page "/collections"
@using HighCode.Domain.DTO
@using HighCode.Domain.Responses
@using HighCode.Client.Components
@using Refit
@inject ISnackbar SnackbarService
@inject NavigationManager NavigationManager
@inject IHighCodeAPI Api;

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (collections == null)
    {
        <MudProgressLinear Indeterminate="true"/>
    }
    else
    {
        <MudText Typo="Typo.h6">Выберите задачу</MudText>

        <AuthorizeView Policy="StaffOnly">
            <MudButton OnClick="() => isCreating = !isCreating" Variant="Variant.Filled" Color="Color.Primary">Добавить коллекцию</MudButton>
            <MudSwitch @bind-Value:after="LoadCollections" @bind-Value="unPublishedOnly" T="bool" Label="Только не опубликованные"/>
            @if (isCreating)
            {
                <CollectionUniversalView OnCreateCallback="LoadCollections" IsCreateMode="true"/>
            }
            <MudDivider Class="ma-2"/>
        </AuthorizeView>
        @foreach (var collection in collections)
        {
            //сделать генерацию фоного цвета
            <CollectionUniversalView Collection="@collection"/>
        }
    }
</MudContainer>

@code {
    IEnumerable<CollectionOfTasksDTO> collections;

    bool isCreating;
    bool unPublishedOnly;

    async Task LoadCollections()
    {
        try
        {
            var response = await Api.GetCollections(unPublishedOnly);
            collections = response.Collections;
            isCreating = false;
            StateHasChanged();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCollections();
        await base.OnInitializedAsync();
    }
}