@page "/collections"
@using HighCode.Domain.DTO
@using HighCode.Domain.Responses
@using HighCode.Domain.ApiRequests.CollectionOfTasks
@using Refit
@inject ISnackbar SnackbarService
@inject NavigationManager NavigationManager
@inject IHighCodeAPI Api;

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (collections == null)
    {
        <MudProgressLinear Indeterminate="true"/>
    }
    else
    {
        <AuthorizeView Policy="StaffOnly">
            <MudButton Variant="Variant.Filled" Color="Color.Primary">Добавить коллекцию</MudButton>
            <MudDivider Class="ma-2"/>
        </AuthorizeView>
        @foreach (var collection in collections.Keys)
        {
            //сделать генерацию фоного цвета
            <MudCard>
                <MudCardHeader Class="pb-0">
                    <CardHeaderContent>
                        @if (editableCollections[collection.Id])
                        {
                            <MudTextField FullWidth="true" T="string" Variant="Variant.Outlined" Label="Название"/>
                        }
                        else
                        {
                            <MudText Color="Color.Primary" Typo="Typo.h5">@collection.Title</MudText>
                        }
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <AuthorizeView Policy="StaffOnly">
                            <MudIconButton OnClick="() => editableCollections[collection.Id] = !editableCollections[collection.Id]" Icon="@Icons.Material.Filled.Edit"/>
                        </AuthorizeView>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    @if (editableCollections[collection.Id])
                    {
                        <MudTextField T="string" Lines="3" FullWidth="true" Variant="Variant.Outlined" Label="Описание"/>
                    }
                    else
                    {
                        <MudText Class="trim_text" Typo="Typo.body1">@collection.Description</MudText>
                    }
                    <MudDivider Class="mb-2 mt-2"/>
                    <MudText Typo="Typo.caption">Задачи:</MudText>
                    @if (editableCollections[collection.Id])
                    {
                        <MudButton>Добавить</MudButton>
                    }
                    <MudStack Class="overflow-x-auto overflow-y-hidden" Row="true" AlignItems="AlignItems.Center">
                        @foreach (var task in collections[collection] ?? [])
                        {
                            <MudStack Spacing="2">
                                <MudPaper MinHeight="160px" MaxHeight="160px" MinWidth="210px" Outlined="true" Class="pb-3 pa-2 clickable_div">
                                    <MudStack @onclick='() => NavigationManager.NavigateTo("/taskdetails/" + task.Id)' Spacing="2">
                                        <MudText Class="trim_text_medium" Color="Color.Info" Typo="Typo.h6">@task.Title</MudText>
                                        <MudText Style="height: 100%" Class="trim_text" Typo="Typo.body1">@task.Description</MudText>
                                    </MudStack>
                                </MudPaper>
                                @if (editableCollections[collection.Id])
                                {
                                    <MudButton Color="Color.Error">Удалить</MudButton>
                                }
                            </MudStack>
                        }
                    </MudStack>
                </MudCardContent>
            </MudCard>
        }
    }
</MudContainer>

@code {
    Dictionary<CollectionOfTasksDTO, IEnumerable<TaskDTO>?>? collections;
    Dictionary<Guid, bool>? editableCollections;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Api.GetCollections(new GetCollectionsQuery());
            collections = new Dictionary<CollectionOfTasksDTO, IEnumerable<TaskDTO>?>(
                response.Collections
                    .ToList()
                    .Select(x => new KeyValuePair<CollectionOfTasksDTO, IEnumerable<TaskDTO>?>(x, null)));
            editableCollections = new Dictionary<Guid, bool>(response
                .Collections
                .Select(x => new KeyValuePair<Guid, bool>(x.Id, false)));
            foreach (var collection in collections.Keys)
            {
                collections[collection] = await LoadTasks(collection.Id);
            }
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }

        await base.OnInitializedAsync();
    }

    async Task<List<TaskDTO>> LoadTasks(Guid collectionId)
    {
        try
        {
            var response = await Api.GetTasksInCollection(
                new GetTaskInCollectionQuery { CollectionId = collectionId });
            return response.Tasks.ToList();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }

        return [];
    }

}