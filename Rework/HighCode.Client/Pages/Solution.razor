@page "/solution/{TaskIdParam}"
@using HighCode.Domain.DTO
@using HighCode.Domain.Responses
@using HighCode.Domain.ApiRequests.Solutions
@using Refit
@inject ISnackbar SnackbarService
@inject NavigationManager NavigationManager
@inject IHighCodeAPI Api;
@inject IJSRuntime JSRuntime;

<MudSpacer />
<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (loading)
    {
        <MudGrid Spacing="4" Justify="Justify.Center">
            <MudItem xs="4" sm="3">
                <MudStack Spacing="4">
                    <MudSkeleton Height="200px" SkeletonType="SkeletonType.Rectangle"/>
                    <MudSkeleton Height="50px" SkeletonType="SkeletonType.Rectangle"/>
                </MudStack>
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudStack Spacing="4">
                    <MudSkeleton Height="250px" SkeletonType="SkeletonType.Rectangle"/>
                    <MudSkeleton Height="250px" SkeletonType="SkeletonType.Rectangle"/>
                </MudStack>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid Spacing="4" Justify="Justify.Center">
            <MudItem sm="4" md="4">
                <MudStack Spacing="4">
                    <MudCard>
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@currentTask.Title</MudText>
                            <MudText Style="white-space: pre-line;" Typo="Typo.body1">@currentTask.Description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="2">
                                @if (isTestingAvaible)
                                {
                                    <MudButton OnClick="TestCodeClick" Variant="Variant.Outlined" Color="Color.Info">Проверить</MudButton>
                                }
                                @if (!isTestingAvaible)
                                {
                                    <MudAlert Dense="true" Severity="Severity.Info">Для данной задачи не поддерживается автоматическое тестирование</MudAlert>
                                }
                                <AuthorizeView Policy="AllAuthNotBanned">
                                    @{
                                        if (isTestingAvaible)
                                            switch (isPublished)
                                            {
                                                case true:
                                                    <MudButton OnClick="RemoveFromPublishClick" Variant="Variant.Filled" Color="Color.Error">Снять с публикации</MudButton>
                                                    break;
                                                case false:
                                                    <MudButton OnClick="PublishClick" Variant="Variant.Filled" Color="Color.Primary">Опубликовать</MudButton>
                                                    break;
                                            }
                                    }
                                </AuthorizeView>
                            </MudStack>
                        </MudCardActions>
                    </MudCard>
                    @if (!string.IsNullOrWhiteSpace(testCodeOutput))
                    {
                        <MudPaper Class="pa-4">
                            <MudText Style="white-space: pre-line;" Typo="Typo.body2">@testCodeOutput</MudText>
                        </MudPaper>
                    }
                </MudStack>
            </MudItem>
            <MudItem sm="4" md="6">
                <MudStack Style="min-width: 340px;" Spacing="4">
                    <MudPaper Class="pa-4">
                        <div style="height: 40vh; overflow: clip;" id="container1"></div>
                    </MudPaper>
                    <MudPaper Class="pa-4">
                        <div style="height: 30vh; overflow: clip;" id="container2"></div>
                    </MudPaper>
                </MudStack>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter] public string TaskIdParam { get; set; }

    [CascadingParameter] Task<AuthenticationState>? authenticationState { get; set; }
    [CascadingParameter]
    MudThemingProvider theme { get; set; }

    Guid taskId;
    bool loading = true;
    bool isTestingAvaible;
    SolutionDTO currentSolution;
    TaskDTO currentTask;
    string testCodeOutput;
    bool isPublished;
    bool isAuth;

    async Task LoadEditors(string code, string unitTestCode)
    {
        await JSRuntime.InvokeVoidAsync("window.initEditors", code, unitTestCode, theme.IsDarkMode ? "vs-dark" : "vs");
    }

    private async void ThemeChanged()
    {
        await JSRuntime.InvokeVoidAsync("monaco.editor.setTheme", theme.IsDarkMode ? "vs-dark" : "vs");
        theme.IsDarkModeChanged = new EventCallback<bool>(this, ThemeChanged); //Гоооооол
    }

    private async void TestCodeClick()
    {
        try
        {
            var testResponse = await Api.TestCode(new TestCodeCommand()
            {
                TaskId = taskId,
                Code = await JSRuntime.InvokeAsync<string>("window.getCodeFromEditor")
            });
            if (testResponse.Success)
            {
                testCodeOutput = testResponse.TestResult.TestOutput;
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            testCodeOutput = error.ErrorMessage;
            StateHasChanged();
        }

        await Save();
    }

    private async void PublishClick()
    {
        try
        {
            await Save();
            var publishResponse = await Api.ChangeSolutionPublish(new ChangeSolutionPublishCommand
            {
                TaskId = taskId,
                IsPublish = true
            });
            if (publishResponse.Success)
            {
                isPublished = true;
                SnackbarService.Add(publishResponse.Message, Severity.Info);
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    private async void RemoveFromPublishClick()
    {
        try
        {
            await Save();
            var changePublishResponse = await Api.ChangeSolutionPublish(new ChangeSolutionPublishCommand
            {
                TaskId = taskId,
                IsPublish = false
            });
            if (!changePublishResponse.Success) return;
            isPublished = false;
            SnackbarService.Add(changePublishResponse.Message, Severity.Info);
            StateHasChanged();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    async Task Save()
    {
        if (!isAuth) return; // сохранение работает только для авторизованных пользователей
        try
        {
            await Api.SaveSolution(new SaveSolutionCommand
            {
                TaskId = taskId,
                Code = await JSRuntime.InvokeAsync<string>("window.getCodeFromEditor")
            });
        }
        catch
        {
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(TaskIdParam, out taskId))
        {
            SnackbarService.Add("Не корректный индефикатор задачи");
            return;
        }

        isAuth = (await authenticationState).User.Identity.IsAuthenticated;
        try
        {
            var taskResponse = await Api.GetTask(taskId);
            if (taskResponse.Success)
            {
                currentTask = taskResponse.Task;
                isTestingAvaible = taskResponse.IsTestingAvailable.GetValueOrDefault();
            }

            if (isAuth)
            {
                var solutionResponse = await Api.GetSolutionForUser(taskId);
                if (solutionResponse.Success)
                {
                    currentSolution = solutionResponse.Solution;
                    isPublished = solutionResponse.Solution.IsPublished.GetValueOrDefault();
                }
            }
            else
            {
                currentSolution = new SolutionDTO
                {
                    Code = taskResponse.Task.CodeTemplate,
                };
            }

            await LoadEditors(currentSolution.Code, currentTask.UnitTestCode);
            loading = false;
        }
        catch(ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
        
        theme.IsDarkModeChanged = new EventCallback<bool>(this, ThemeChanged);
        await base.OnInitializedAsync();
    }
}