@page "/profile"
@using HighCode.Domain.ApiResponses.UserProfile
@using HighCode.Domain.Responses
@using Refit
@using HighCode.Domain.ApiRequests.UserProfile
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject ISnackbar SnackbarService
@inject IHighCodeAPI Api;

<MudContainer MaxWidth="MaxWidth.Small">
    @if (response == null)
    {
        <MudProgressLinear Indeterminate="true"/>
    }
    else
    {
        <AuthorizeView Policy="AllAuthNotBanned">
            <MudCard Class="pt-0">
                <MudCardHeader Class="pb-0 ">
                    <CardHeaderContent>
                        @if (isEditing)
                        {
                            <MudTextField T="string" @bind-Value="userName" FullWidth="true" Lines="1" Variant="Variant.Outlined" Label="Никнейм"/>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6">@userName</MudText>
                        }
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Class="mt-4" OnClick="() => isEditing = !isEditing" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    @if (isEditing)
                    {
                        <MudTextField @bind-Value="bio" T="string" FullWidth="true" Lines="3" Variant="Variant.Outlined" Label="Описание"/>
                        <MudButton OnClick="SaveProfileData" FullWidth="true" Color="Color.Primary">Сохранить</MudButton>
                    }
                    else
                    {
                        <MudText Typo="Typo.caption">Описание:</MudText>
                        <MudText>@bio</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </AuthorizeView>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2" Centered="true" Class="mt-2">
            <AuthorizeView Policy="AllAuthNotBanned">
                <MudTabPanel Text="Статистика">
                    <MudText Typo="Typo.body1">Количество очков: @response.Statistics.ratingsScore.GetValueOrDefault()</MudText>
                    <MudText Typo="Typo.body1">Позиция в рейтинге: @response.Statistics.ratingsPosition.GetValueOrDefault()</MudText>
                    <MudText Typo="Typo.body1">Количество решенных задач: @response.Statistics.completedTasks</MudText>
                </MudTabPanel>
            </AuthorizeView>
            <MudTabPanel Text="Задачи">
                @if (!response.Solutions.Any())
                {
                    <MudContainer>
                        <MudText Typo="Typo.h6">Нет задач</MudText>
                        <MudButton Color="Color.Primary" Href="/tasks">Начать решать</MudButton>
                    </MudContainer>
                }
                @foreach (var solution in response.Solutions)
                {
                    <MudStack AlignItems="AlignItems.Center" Class="mt-2" Row="true" Justify="Justify.SpaceBetween">
                        <MudText GutterBottom="true" Typo="Typo.body1">@solution.Title</MudText>
                        <MudButton Href=@("/solution/" + solution.TaskId)>Перейти</MudButton>
                    </MudStack>
                }
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>


@code {
    GetUserProfileResponse response;
    bool isEditing;
    string userName;
    string bio;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            response = await Api.GetUserProfile();
            userName = response.UserName;
            bio = response.Description;
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }

        await base.OnInitializedAsync();
    }

    private async void SaveProfileData()
    {
        try
        {
            isEditing = false;
            var saveResponse = await Api.EditProfile(new EditUserProfileCommand
            {
                UserName = userName,
                Description = bio
            });
            SnackbarService.Add(saveResponse.Message, Severity.Info);
            StateHasChanged();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

}