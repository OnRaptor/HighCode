@page "/login/{*RefUrl}"
@using HighCode.Client.Services
@using HighCode.Domain.ApiRequests.Auth
@using HighCode.Domain.Responses
@using Refit
@inject AuthService AuthService
@inject ISnackbar SnackbarService
@inject NavigationManager NavigationManager
@inject IHighCodeAPI Api;


<MudContainer MaxWidth="MaxWidth.Small">
    <MudCard Style="max-width: 500px">
        <MudCardContent>
            <MudText Typo="Typo.h5">Авторизация</MudText>
            <MudForm @bind-IsValid="Success">
                <MudStack Spacing="2">
                    <MudTextField Required="true" @bind-Value="LoginValue" T="string" Label="Логин" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField Required="true" @bind-Value="PasswordValue" InputType="InputType.Password" T="string" Label="Пароль" Variant="Variant.Outlined"></MudTextField>
                    @* Нужен refresh token что бы это нормально реализовать
                    <MudCheckBox @bind-Value="IsRememberValue" T="bool">Запомнить</MudCheckBox>
                    *@
                    <MudButton Disabled="@(!Success)" OnClick="LoginCommand" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">Войти</MudButton>
                    <MudLink Href="/register">Регистрация</MudLink>
                </MudStack>
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter] public string? RefUrl { get; set; }

    string LoginValue { get; set; }
    string PasswordValue { get; set; }
    bool IsRememberValue { get; set; }
    bool Success;

    private async void LoginCommand()
    {
        try
        {
            var result = await Api.Login(new LoginCommand()
            {
                Login = LoginValue,
                Password = PasswordValue
            });
            if (result.Success)
            {
                await AuthService.SaveAuthData(result.Token, result.ValidTo.Value);
                NavigationManager.NavigateTo(string.IsNullOrEmpty(RefUrl) ? "/tasks" : '/' + RefUrl);
            }
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await authenticationState;
            if (state.User.Identity.IsAuthenticated)
                NavigationManager.NavigateTo("/tasks");
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}