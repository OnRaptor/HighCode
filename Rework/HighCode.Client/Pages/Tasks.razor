@page "/tasks"
@using HighCode.Domain.DTO
@using HighCode.Domain.Responses
@using HighCode.Domain.Constants
@using HighCode.Domain.ApiRequests.Tasks
@using Refit
@using HighCode.Client.Components.Dialogs
@inject IHighCodeAPI api;
@inject ISnackbar SnackbarService
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (CodeTasks == null)
    {
        <MudProgressLinear Indeterminate="true"/>
    }
    <MudDrawerContainer Class="mud-height-full">
        <MudDrawer @bind-Open="showDrawer" DisableOverlay="true" Elevation="0" Style="background-color: var(--mud-palette-background); z-index: 1">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Фильтры</MudText>
            </MudDrawerHeader>
            <MudStack Class="ms-4 pa-2" Spacing="2">
                @foreach (var filterType in filterValues.Keys)
                {
                    @switch (filterType)
                    {
                        case FilterTypeConstants.ByCategory:
                        case FilterTypeConstants.ByLanguage:
                        {
                            <MudTextField Variant="Variant.Outlined" Label="@filterType" @bind-Value:get="@((string?)GetFilterValue(filterType))" @bind-Value:set="(e) => ApplyFilterValue(filterType, e)" T="string?"/>
                            break;
                        }
                        case FilterTypeConstants.ByComplexity:
                        {
                            <MudSelect Variant="Variant.Outlined" T="int?" @bind-Value:get="@((int?)GetFilterValue(filterType))" @bind-Value:set="(e) => ApplyFilterValue(filterType, e)" Label="Сложность">
                                <MudSelectItem T="int?" Value="@(null)">Нет</MudSelectItem>
                                <MudSelectItem T="int?" Value="0">Легко</MudSelectItem>
                                <MudSelectItem T="int?" Value="1">Средне</MudSelectItem>
                                <MudSelectItem T="int?" Value="2">Сложно</MudSelectItem>
                            </MudSelect>
                            break;
                        }
                    }
                }
                <MudButton Variant="Variant.Outlined" OnClick="ClearFilters" Color="Color.Error">Очистить фильтры</MudButton>
            </MudStack>
        </MudDrawer>
        <MudStack Wrap="Wrap.Wrap" Row="true" Spacing="2">
            <MudText Typo="Typo.h6">Задачи (@CodeTasks?.Count)</MudText>
            <AuthorizeView Policy="StaffOnly">
                <MudFab Class="fixed" Style="right: 15px; bottom: 15px; z-index: 100" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddTaskClick()" Variant="Variant.Filled" Color="Color.Primary"></MudFab>
                <MudChipSet @bind-SelectedChip:after="LoadTasks" @bind-SelectedChip="selectedGroupChip" Mandatory="true" Filter="true" Color="Color.Primary" Variant="Variant.Outlined">
                    <MudChip Value="0" Default="true">По умолчанию</MudChip>
                    <MudChip Value="1">Только неопубликованные</MudChip>
                    <MudChip Value="2">Только предложенные</MudChip>
                </MudChipSet>
            </AuthorizeView>
            <AuthorizeView Policy="UserOnly">
                <MudButton OnClick="() => AddTaskClick(true)" Variant="Variant.Filled" Color="Color.Primary">Предложить задачу</MudButton>
            </AuthorizeView>
        </MudStack>
        @if (CodeTasks != null)
        {
            <MudStack AlignItems="AlignItems.Center" Spacing="2" Row="true">
                <MudTextField Placeholder="Поиск..." Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" FullWidth="true" T="string" @bind-Value="@searchQuery" @bind-Value:after="LoadTasks"></MudTextField>
                <MudButton OnClick="() => showDrawer = !showDrawer">Фильтры</MudButton>
            </MudStack>
        @foreach (var task in CodeTasks)
        {
            <MudCard Outlined="true" Class="mt-5">
                <MudCardHeader Class="pb-0">
                    <CardHeaderContent>
                        <MudText Color="Color.Info" Typo="Typo.h6">@task.Title</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <AuthorizeView Policy="StaffOnly">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditTaskClick(task)" Variant="Variant.Text" Color="Color.Warning"></MudIconButton>
                        </AuthorizeView>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    <MudText Class="trim_text" Typo="Typo.body1">@task.Description</MudText>
                    <MudStack Wrap="Wrap.Wrap" Row="true">
                        @if (!string.IsNullOrEmpty(task.Category))
                        {
                            <MudChip OnClick='() => ApplyFilterValue("category", task.Category)' Variant="Variant.Filled" Color="Color.Info">@task.Category</MudChip>
                        }
                        <MudChip OnClick='() => ApplyFilterValue("language", task.ProgrammingLanguage)' Variant="Variant.Filled">@task.ProgrammingLanguage</MudChip>
                        <MudChip OnClick='() => ApplyFilterValue("complexity", task.Complexity)' Variant="Variant.Filled">@(TaskDTO.ComplexityToString(task.Complexity.GetValueOrDefault()))</MudChip>
                    </MudStack>
                    @if (!string.IsNullOrEmpty(task.AuthorName))
                    {
                        <MudText Color="Color.Tertiary" Typo="Typo.caption">Предложено пользователем @task.AuthorName</MudText>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudStack AlignItems="AlignItems.Center" Class="pl-2" Row="true" Spacing="2" Wrap="Wrap.Wrap">
                        @if (!task.IsSuggested)
                        {
                            <MudButton Href=@("/solution/" + task.Id) Variant="Variant.Filled" Color="Color.Primary">Начать решать</MudButton>
                            <MudButton Href=@("/taskdetails/" + task.Id) Variant="Variant.Text" Color="Color.Secondary">Подробнее</MudButton>
                        }
                        else
                        {
                            <AuthorizeView Policy="StaffOnly">
                                <MudButton OnClick="() => PublishTask(task)" Variant="Variant.Filled" Color="Color.Primary">Одобрить</MudButton>
                            </AuthorizeView>
                        }
                    </MudStack>
                </MudCardActions>
            </MudCard>
        }
    }
    </MudDrawerContainer>

</MudContainer>

@code {
    ICollection<TaskDTO>? CodeTasks { get; set; }
    MudChip? selectedGroupChip;
    string searchQuery { get; set; }
    bool showDrawer;

    Dictionary<string, object?> filterValues
        = new(FilterTypeConstants
            .GetAll()
            .Select(x => KeyValuePair.Create<string, object?>(x, null)));

    async Task LoadTasks()
    {
        CodeTasks = null;
        StateHasChanged();
        try
        {
            var r = await api.GetTasks(new GetAllTaskQuery
            {
                GroupType = (int)(selectedGroupChip?.Value ?? 0),
                SearchQuery = searchQuery,
                Filters = filterValues
                    .Where(x => x.Value != null)
                    .Select(x => new GetAllTaskQuery.FilterType(x.Key, x.Value.ToString()))
            });
            if (r is { Success: true })
            {
                CodeTasks = r.Tasks.ToList();
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error?.ErrorMessage, Severity.Error);
        }
    }

    async void ClearFilters()
    {
        filterValues
            = new Dictionary<string, object>(FilterTypeConstants
                .GetAll()
                .Select(x => KeyValuePair.Create<string, object?>(x, null)));
        showDrawer = false;
        await LoadTasks();
    }

    async void ApplyFilterValue(string type, object value)
    {
        filterValues[type] = value;
        showDrawer = true;
        await LoadTasks();
    }

    object? GetFilterValue(string type)
    {
        return filterValues[type];
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
        await base.OnInitializedAsync();
    }

    private async void EditTaskClick(TaskDTO oldTask)
    {
        try
        {
            var dialog = await DialogService.ShowAsync<EditTaskDialog>(null,
                new DialogParameters<EditTaskDialog>
                {
                    {
                        x => x.Task, oldTask
                    }
                },
                new DialogOptions()
                {
                    MaxWidth = MaxWidth.Medium,
                    FullWidth = true
                });
            var dialogResult = await dialog.Result;

            if (dialogResult.Canceled) return;

            var newTask = dialogResult.Data as TaskDTO;
            var r = await api.EditTask(new EditTaskCommand()
            {
                TaskId = oldTask.Id,
                Task = newTask
            });
            SnackbarService.Add(r.Message, Severity.Info);
            StateHasChanged();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    private async void AddTaskClick(bool userSuggest=false)
    {
        var dialog = await DialogService.ShowAsync<CreateTaskDialog>(null,
        new DialogParameters<CreateTaskDialog>
        {
            {
                x => x.isUserSuggest, userSuggest
            }
        },
        new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });
        var dialogResult = await dialog.Result;
        if (dialogResult.Canceled) return;

        try
        {
            var task = dialogResult.Data as TaskDTO;
            var r = await api.CreateTask(task);
            SnackbarService.Add(r.Message, Severity.Info);
            await LoadTasks();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }


    private async void PublishTask(TaskDTO task)
    {
        try
        {
            task.IsSuggested = false;
            var r = await api.EditTask(new EditTaskCommand()
            {
                TaskId = task.Id,
                Task = task
            });
            SnackbarService.Add("Задача опубликована", Severity.Info);
            await LoadTasks();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

}