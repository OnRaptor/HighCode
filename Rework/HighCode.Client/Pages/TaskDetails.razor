@page "/taskdetails/{TaskId}"
@using HighCode.Domain.DTO
@using HighCode.Domain.Responses
@using HighCode.Client.Components
@using Refit
@using HighCode.Domain.Constants
@inject ISnackbar SnackbarService
@inject IHighCodeAPI Api;

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (task == null)
    {
        <MudProgressLinear Indeterminate="true"/>
    }
    else
    {
        <MudPaper Class="pa-4">
            <MudText Color="Color.Info" Typo="Typo.h6">@task.Title</MudText>
            <MudText Style="white-space: pre-line;" Typo="Typo.body1">@task.Description</MudText>
            <MudStack Row="true">
                @if (!string.IsNullOrEmpty(task.Category))
                {
                    <MudChip Variant="Variant.Filled" Color="Color.Primary">@task.Category</MudChip>
                }
                <MudChip Variant="Variant.Filled">@task.ProgrammingLanguage</MudChip>
                <MudChip Variant="Variant.Filled">@(TaskDTO.ComplexityToString(task.Complexity.GetValueOrDefault()))</MudChip>
            </MudStack>
        </MudPaper>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="mt-3" PanelClass="pa-2">
            <MudTabPanel Text="Комментарии" BadgeData="CommentsCount">
                <CommentsSection @bind-CommentCount="CommentsCount" BaseTargetTypeForComment="TargetTypeForComment.ToTask" BaseTargetIdForComment="@taskId"/>
            </MudTabPanel>
            <MudTabPanel Text="Решения">
                <SolutionsSection CodeTask="task"/>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    [Parameter] public string TaskId { get; set; }

    TaskDTO? task;
    Guid taskId;
    int? CommentsCount;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Guid.TryParse(TaskId, out taskId);
            var getTaskByIdResponse = await Api.GetTask(taskId);
            if (getTaskByIdResponse.Success)
                task = getTaskByIdResponse.Task;
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }

        await base.OnInitializedAsync();
    }
}