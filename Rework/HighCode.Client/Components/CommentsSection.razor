@using HighCode.Domain.Constants
@using HighCode.Domain.DTO
@using HighCode.Domain.Responses
@using HighCode.Client.Services
@using HighCode.Domain.ApiRequests.Comments
@using HighCode.Domain.ApiRequests.Reactions
@using Refit
@inject AuthService AuthService
@inject ISnackbar SnackbarService
@inject NavigationManager NavigationManager
@inject IHighCodeAPI Api;

<MudStack Class="ml-4" Spacing="2">
    @if (comments == null)
    {
        <MudProgressCircular Indeterminate="true"/>
    }
    else
    {
        @if (comments.Count == 0)
        {
            <MudText Typo="Typo.body1">Нет комментариев</MudText>
        }

        @foreach (var comment in comments)
        {
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Row="true">
                <MudText Typo="Typo.h6">@("@" + comment.AuthorName)</MudText>
                <MudText Typo="Typo.caption">@comment.DateCreated</MudText>
            </MudStack>
            <MudText Typo="Typo.body1">@comment.Content</MudText>
            <MudStack Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Spacing="2" Row="true">
                <span>
                    <MudIconButton OnClick="() => PostReaction(0, comment.Id)" Color="@(comment.MyReaction is 0 ? Color.Primary : Color.Default)" Icon="@Icons.Material.Filled.ThumbUp"></MudIconButton>
                    @comment.Likes
                </span>
                <span>
                    <MudIconButton OnClick="() => PostReaction(1, comment.Id)" Color="@(comment.MyReaction is 1 ? Color.Primary : Color.Default)" Icon="@Icons.Material.Filled.ThumbDown"></MudIconButton>
                    @comment.Dislikes
                </span>
                @if (AuthService.IsAuthenticated)
                {
                    <MudButton OnClick="() => SetReplyAbleComment(comment.AuthorName, comment.Id)">Ответить</MudButton>
                    @if (comment.IsMine || AuthService.CurrentRole == UserRoleTypes.Moderator)
                    {
                        <MudButton OnClick="() => DeleteComment(comment.Id)" Color="Color.Error">Удалить</MudButton>
                    }

                    @if (AuthService.CurrentRole == UserRoleTypes.Moderator)
                    {
                        <MudButton Color="Color.Error">Заблокировать пользователя</MudButton>
                    }
                }
            </MudStack>
            @if (comment.RepliesCount != 0 && comment.Replies?.Count() == 0)
            {
                <MudButton
                    OnClick="async () => { var replies = await LoadReplies(comment.Id); if (replies != null) { comment.Replies = replies.ToList(); StateHasChanged(); } }"
                    FullWidth="true">
                    Показать @comment.RepliesCount ответа
                </MudButton>
            }

            @if (comment.Replies != null && comment.Replies.Count() != 0)
            {
                <MudStack Class="ml-4" Spacing="2">
                    @foreach (var reply in comment.Replies)
                    {
                        <MudStack AlignItems="AlignItems.Center" Row="true">
                            <MudText Typo="Typo.h6">@("@" + reply.AuthorName)</MudText>
                            <MudSpacer/>
                            <MudText Typo="Typo.caption">@reply.DateCreated</MudText>
                        </MudStack>
                        <MudText Typo="Typo.caption">В ответ @reply.AnotherAuthor</MudText>
                        <MudText Typo="Typo.body1">@reply.Content</MudText>
                        <MudStack Wrap="Wrap.Wrap" AlignItems="AlignItems.Center" Spacing="2" Row="true">
                            <span>
                                <MudIconButton OnClick="() => PostReaction(0, comment.Id, true, reply.Id)" Color="@(reply.MyReaction is 0 ? Color.Primary : Color.Default)" Icon="@Icons.Material.Filled.ThumbUp"></MudIconButton>
                                @reply.Likes
                            </span>
                            <span>
                                <MudIconButton OnClick="() => PostReaction(1, comment.Id, true, reply.Id)" Color="@(reply.MyReaction is 1 ? Color.Primary : Color.Default)" Icon="@Icons.Material.Filled.ThumbDown"></MudIconButton>
                                @reply.Dislikes
                            </span>
                            @if (AuthService.IsAuthenticated)
                            {
                                <MudButton OnClick="() => SetReplyAbleComment(reply.AuthorName, comment.Id)">Ответить</MudButton>
                                @if (reply.IsMine || AuthService.CurrentRole == UserRoleTypes.Moderator)
                                {
                                    <MudButton OnClick="() => DeleteComment(reply.Id)" Color="Color.Error">Удалить</MudButton>
                                }

                                @if (AuthService.CurrentRole == UserRoleTypes.Moderator)
                                {
                                    <MudButton Color="Color.Error">Заблокировать пользователя</MudButton>
                                }
                            }
                        </MudStack>
                    }
                </MudStack>
            }
        }
    }
    @if (AuthService.IsAuthenticated)
    {
        <MudTextField @bind-Value="newTaskComment" Variant="Variant.Outlined" Placeholder="Ваш комментарий" Lines="4" T="string" FullWidth="true"/>
        @if (!string.IsNullOrEmpty(replyAbleAuthorName))
        {
            <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="2">
                <MudText Typo="Typo.caption">В ответ @replyAbleAuthorName</MudText>
                <MudIconButton OnClick="ClearReplyAbleComment" Icon="@Icons.Material.Filled.Close" Color="Color.Error" Style="width: 20px; height: 20px;"/>
            </MudStack>
        }

        <MudButton OnClick="NewTaskCommentClick" Variant="Variant.Filled" Color="Color.Primary">Оставить комментарий</MudButton>
    }
    else
    {
        <MudText Typo="Typo.body1">Чтообы оставить комментарий пройдите авторизацию</MudText>
    }
</MudStack>

@code {
    [Parameter] [EditorRequired] public Guid BaseTargetIdForComment { get; set; }
    [Parameter] [EditorRequired] public TargetTypeForComment BaseTargetTypeForComment { get; set; }

    [Parameter] public int? CommentCount { get; set; }

    [Parameter] public EventCallback<int?> CommentCountChanged { get; set; }

    List<CommentDTO>? comments;
    string newTaskComment;
    string? replyAbleAuthorName;
    Guid reservedTargetId;
    TargetTypeForComment reservedTargetType;

    protected override async Task OnInitializedAsync()
    {
        await LoadComments();
        reservedTargetId = BaseTargetIdForComment;
        reservedTargetType = BaseTargetTypeForComment;
        await base.OnInitializedAsync();
    }

    async Task<IEnumerable<CommentDTO>?> LoadReplies(Guid commentId)
    {
        try
        {
            var commentsResponse = await Api.GetComments((int)TargetTypeForComment.Reply, commentId);
            return commentsResponse.Comments;
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }

        return default;
    }

    void SetReplyAbleComment(string replyAbleAuthorName, Guid replyAbleCommentId)
    {
        BaseTargetTypeForComment = TargetTypeForComment.Reply;
        BaseTargetIdForComment = replyAbleCommentId;
        this.replyAbleAuthorName = replyAbleAuthorName;
        StateHasChanged();
    }

    void ClearReplyAbleComment()
    {
        BaseTargetTypeForComment = reservedTargetType;
        BaseTargetIdForComment = reservedTargetId;
        replyAbleAuthorName = null;
        StateHasChanged();
    }

    async void PostReaction(int reactionType, Guid commentId, bool isReply = false, Guid? replyId = null)
    {
        try
        {
            var postReactionResponse = await Api.AddReactionToComment(new PostReactionForCommentCommand
            {
                CommentId = commentId,
                CommentReaction = reactionType
            });
            if (!postReactionResponse.Success) return;

            var commentIndex = comments.FindIndex(c => c.Id == commentId);
            if (isReply)
            {
                var replyIndex = comments[commentIndex].Replies.ToList().FindIndex(c => c.Id == replyId);
                comments[commentIndex].Replies[replyIndex].Likes = postReactionResponse.LikesCount;
                comments[commentIndex].Replies[replyIndex].Dislikes = postReactionResponse.DislikesCount;
                comments[commentIndex].Replies[replyIndex].MyReaction = postReactionResponse.MyReaction;
            }
            else
            {
                comments[commentIndex].Likes = postReactionResponse.LikesCount;
                comments[commentIndex].Dislikes = postReactionResponse.DislikesCount;
                comments[commentIndex].MyReaction = postReactionResponse.MyReaction;
            }

            StateHasChanged();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    private async void NewTaskCommentClick()
    {
        try
        {
            var newCommentResponse = await Api.PostComment(new PostCommentCommand
            {
                Content = newTaskComment,
                TargetType = (int)BaseTargetTypeForComment,
                RelatedTargetId = BaseTargetIdForComment,
                AnotherAuthorName = replyAbleAuthorName
            });
            if (newCommentResponse.Success)
                SnackbarService.Add(newCommentResponse.Message, Severity.Info);

            newTaskComment = "";
            ClearReplyAbleComment();
            await LoadComments();
            StateHasChanged();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    async Task LoadComments()
    {
        try
        {
            var commentsResponse = await Api.GetComments((int)BaseTargetTypeForComment, BaseTargetIdForComment);
            comments = commentsResponse.Comments.ToList();
            await CommentCountChanged.InvokeAsync(comments.Count);
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

    private async void DeleteComment(Guid commentId)
    {
        try
        {
            var deleteResponse = await Api.DeleteComment(commentId);
            SnackbarService.Add(deleteResponse.Message, Severity.Info);
            await LoadComments();
            StateHasChanged();
        }
        catch (ApiException e)
        {
            var error = await e.GetContentAsAsync<ErrorResponse>();
            SnackbarService.Add(error.ErrorMessage, Severity.Error);
        }
    }

}