@using HighCode.Client.Services
@inherits LayoutComponentBase
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="IsDarkTheme" @bind-IsDarkMode:after="StateHasChanged"/>
<MudDialogProvider />
<MudSnackbarProvider/>

<CascadingValue Value="_mudThemeProvider">
    <MudLayout>
        <MudPaper Style="top: 0; left: 0; right: 0; " Class="px-4 py-1 ma-2 rounded-pill fixed z-100" Elevation="3">
            <MudStack Wrap="Wrap.Wrap" Style="width: 100%" AlignItems="AlignItems.Center" Row="true" Justify="Justify.SpaceBetween">
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudLink Class="mr-2" Typo="Typo.h5" Underline="Underline.None" Href="">HighCode</MudLink>
                    </MudHidden>
                    <MudButton StartIcon="@Icons.Material.Filled.Task" Href="/tasks">Задачи</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.TableChart" Href="/rating">Рейтинг</MudButton>
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudIconButton Icon="@ThemeSwitchIcon" OnClick="() => IsDarkTheme = !IsDarkTheme"></MudIconButton>
                    @if (AuthService.IsAuthenticated)
                    {
                        <MudButton Href="/profile">Профиль</MudButton>
                        <MudButton OnClick="SignOut">Выйти</MudButton>
                    }
                    else
                    {
                        <MudButton Href="/login">Войти</MudButton>
                    }
                </MudStack>
            </MudStack>
        </MudPaper>
        <MudMainContent Class="mt-5">
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingValue>

@code{
    bool IsDarkTheme { get; set; }
    string ThemeSwitchIcon => IsDarkTheme ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode;

    private MudThemeProvider _mudThemeProvider;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsDarkTheme = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await AuthService.Init();
        await base.OnInitializedAsync();
    }

    private async void SignOut()
    {
        await AuthService.RemoveToken();
        NavigationManager.Refresh(true);
    }
}