@using HighCode.Client.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager


<MudButton StartIcon="@Icons.Material.Filled.Task" Href="/tasks">Задачи</MudButton>
<MudButton StartIcon="@Icons.Material.Filled.TableChart" Href="/rating">Рейтинг</MudButton>
<MudButton StartIcon="@Icons.Material.Filled.ViewList" Href="/collections">Коллекции задач</MudButton>
<AuthorizeView Policy="StaffOnly">
    <MudButton StartIcon="@Icons.Material.Filled.AdminPanelSettings" Href="/admin">Администрирование</MudButton>
</AuthorizeView>
<MudSpacer/>
@if (ShowThemeSwitcher)
{
    <MudIconButton Icon="@ThemeSwitchIcon" OnClick="DarkThemeCallback"></MudIconButton>
}
<AuthorizeView>
    <Authorized>
        <MudButton StartIcon="@Icons.Material.Filled.ManageAccounts" Href="/profile">
            <MudStack Spacing="0">
                <MudText Typo="Typo.body1" Color=@(context.User.IsInRole("Banned") ? Color.Error : Color.Default)>@context.User.Identity.Name</MudText>
                @if (context.User.IsInRole("Banned"))
                {
                    <MudText Style="font-size: 9px;" Typo="Typo.caption">Вы заблокированы</MudText>
                }
            </MudStack>
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Logout" OnClick="SignOut">Выйти</MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton StartIcon="@Icons.Material.Filled.Login" Href=@("/login/" + currentLocation)>Войти</MudButton>
    </NotAuthorized>
</AuthorizeView>


@code{
    [Parameter] public string ThemeSwitchIcon { get; set; } = "";
    [Parameter] public Action? DarkThemeCallback { get; set; }
    [Parameter] public bool ShowThemeSwitcher { get; set; } = true;

    string currentLocation;

    private async void SignOut()
    {
        await AuthService.RemoveToken();
    }

    protected override void OnInitialized()
    {
        currentLocation = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += (sender, args) =>
        {
            currentLocation = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            StateHasChanged();
        };
        base.OnInitialized();
    }

}